package main

import (
    "fmt"
)

templ sheet(name string, cols []Column, extraCols []SheetColumn, cells [][]Cell) {
    <thead>
        <tr id="header-row">
            <th>
                <button onclick="htmx.removeClass(htmx.find('#new-row'), 'hide')
                                 htmx.removeClass(htmx.find('#new-row-err-container'), 'hide')">
                    + Row
                </button>
            </th>
        for i, col := range cols {
            <th class={ templ.KV("is-pkey", col.IsPrimaryKey) }
                onmouseup="document.getElementById('column').value = this.textContent"
                hx-post="/table"
                hx-include="#header-row">
                if len(extraCols) > 0 || i + 1 < len(cols) {
                    <span>{ col.Name }</span>
                } else {
                <div class="flex">
                    <span>{ col.Name }</span>
                    <button id="add-col-button"
                        hx-post="/add-column"
                        hx-swap="none"
                        onclick="addCol()">
                        + Col
                    </button>
                </div>
                }
            </th>
        }
        for i, col := range extraCols {
            if i + 1 < len(extraCols) {
            <th>
                <input name={ fmt.Sprintf("column-name-%d", i) }
                       value={ col.Name }
                       hx-post="/set-col-name"
                       hx-swap="none" />
            </th>
            } else {
            <th>
                <div class="flex">
                    <input name={ fmt.Sprintf("column-name-%d", i) }
                           value={ col.Name }
                           hx-post="/set-col-name"
                           hx-swap="none" />
                    <button id="add-col-button"
                        hx-post="/add-column"
                        hx-swap="none"
                        onclick="addCol()">
                        + Col
                    </button>
                </div>
            </th>
            }
        }
            <input type="hidden"
                   id="column"
                   name="column"/>
            <input type="hidden"
                   id="hide"
                   name="hide"
                   value="false"/>
        </tr>
    </thead>
    <tbody>
        <tr id="new-row" class="hide">
            <td style="border-bottom: none">
                <button hx-post="/table"
                        hx-include="#new-row"
                        hx-target-400="#new-row-err">
                    Add
                </button>
            </td>
        for _, col := range cols {
            <td style="border-bottom: none">
                <input name={ "column-" + col.Name }/>
            </td>
        }
        </tr>
        <tr id="new-row-err-container" class="hide">
            <td id="new-row-err"
                colspan={ fmt.Sprintf("%d", len(cols)) }
                style="border-top: none"
                class="has-text-danger">
            </td>
        </tr>
    for j, row := range cells {
        <tr class="body-row">
            <td></td>
        for _, cell := range row {
            <td class={ templ.KV("is-null", !cell.NotNull) }>
                <span>{ cell.Value }</span>
            </td>
        }
        for i, extraCol := range extraCols {
            <td class={ templ.KV("is-null", !extraCol.cells[j].NotNull) }>
                <span class="custom-cell-value">
                    { extraCol.cells[j].Value }
                </span>
                <input name={ fmt.Sprintf("custom-cell-%d,%d", i, j) }
                       class="custom-cell-formula hide"
                       value={ extraCol.cells[j].formula }
                       hx-post="/set-cell"
                       hx-swap="none" />
            </td>
        }
        </tr>
    }
    </tbody>
}

func RenderSheet(s Sheet, cells [][]Cell) templ.Component {
    return sheet(s.table.FullName(), s.OrderedCols(), s.extraCols, cells)
}
