package main

import (
	"acb/db-interface/sheets"
    "fmt"
    "strconv"
)

templ sortIcon(ascending bool) {
    if ascending {
    <img src="/static/icons/arrow_upward_FILL0_wght400_GRAD0_opsz24.svg"/>
    } else {
    <img src="/static/icons/arrow_downward_FILL0_wght400_GRAD0_opsz24.svg"/>
    }
}

templ colHeader(tableName string, col sheets.Column, pref sheets.Pref) {
    <th class={ templ.KV("is-pkey", col.IsPrimaryKey) }
        hx-post="/set-column-prefs"
        hx-vals={ fmt.Sprintf("js:{table_name:\"%s\",col_name:\"%s\",hide:shiftPressed,sorton:\"%t\",ascending:\"%t\"}",
                  tableName, col.Name, !pref.SortOn || !pref.Ascending, pref.SortOn && !pref.Ascending) } >
        <div class="col-header">
            <span>{ col.Name }</span>
        if pref.SortOn {
            @sortIcon(pref.Ascending)
        }
        </div>

    </th>
}

templ extraColHeader(i int, name string) {
    <th hx-post="/delete-column"
        hx-vals={ fmt.Sprintf("{\"col_index\":%d}", i) }
        hx-trigger="click[shiftKey]" >
        <input name="col_name"
               hx-vals={ fmt.Sprintf("{\"col_index\":%d}", i) }
               value={ name }
               hx-post="/rename-column"
               hx-swap="none" />
    </th>
}

templ tableCell(tableName string, col sheets.Column, row int, cell sheets.Cell, err error) {
    if col.IsPrimaryKey {
        <div hx-get="/new-row"
             hx-trigger="click"
             hx-vals={ fmt.Sprintf("{\"table_name\":\"%s\"}", tableName) }
             hx-include={ fmt.Sprintf("[name=sheet_id],tr[data-row=\"%d\"] [data-table=\"%s\"][name^=pk-]", row, tableName) }
             hx-target={ fmt.Sprintf("tr[data-row=\"%d\"]", row) }
             hx-swap="afterend" >
             { cell.Value }
        </div>
    } else {
        <input name="value"
               hx-post="/set-cell"
               hx-target="this"
               hx-swap="outerHTML"
               hx-vals={ fmt.Sprintf("{\"table_name\":\"%s\",\"col_name\":\"%s\",\"row\":%d}", tableName, col.Name, row) }
               hx-include={ fmt.Sprintf("[name=sheet_id],tr[data-row=\"%d\"] [data-table=\"%s\"][name^=pk-]", row, tableName) }
               value={ cell.Value }
               size="1"
               class={ templ.KV("is-danger", err != nil) } />
    }
}

templ extraCell(i, j int, cell sheets.SheetCell) {
    <td class={ "extra-cell", templ.KV("is-null", !cell.NotNull) }>
        <div class="flex">
            <input name="formula"
                class="extra-cell-formula hide"
                value={ cell.Formula }
                hx-post="/set-extra-cell"
                hx-vals={ fmt.Sprintf("{\"i\":%d,\"j\":%d}", i, j) }
                hx-target="closest td"
                hx-swap="outerHTML"
                size={ strconv.Itoa(max(len(cell.Formula), 1)) } />
            <span class="extra-cell-value">
                { cell.Value }
            </span>
        </div>
    </td>
}

templ newRow(tableNames []string, tableName string, cols [][]sheets.Column, numCols int, cells []sheets.Cell, rowIndex int) {
    <tr id="new-row">
    for i, tcols := range cols {
    for j, col := range tcols {
    if tableNames[i] == tableName && len(cells) > 0 {
        <td style="border-bottom: none"
            class={ templ.KV("is-null", len(cells) > 0 && !cells[j].NotNull) }>
            <span>{ cells[j].Value }</span>
        </td>
    } else {
        <td style="border-bottom: none">
            <input name={ "column-" + tableNames[i] + " " + col.Name } />
        </td>
    }
    }
    }
    </tr>
    <tr id="new-row-err-container">
        <td colspan={ fmt.Sprintf("%d", numCols) }
            style="border-top: none">
            <div class="flex center">
                <button hx-post="/add-row"
                        hx-include={ fmt.Sprintf("[name=sheet_id],#new-row,tr[data-row=\"%d\"] [data-table=\"%s\"][name^=pk-]", rowIndex, tableName) }
                        hx-include="#new-row"
                        hx-target-400="#new-row-err"
                        class="button is-light">
                    Add
                </button>
                <span id="new-row-err" class="has-text-danger">
                </span>
            </div>
        </td>
    </tr>
}

templ sheetTable(sheet sheets.Sheet, cols [][]sheets.Column, cells [][][]sheets.Cell, numCols int) {
    <thead>
        <tr>
        for i, tableName := range sheet.TableNames {
        if len(cols[i]) > 0 {
            <th colspan={ strconv.Itoa(len(cols[i])) }>
                { tableName }
            </th>
        }
        }
        </tr>
        <tr id="header-row">
        for i, tcols := range cols {
        for _, col := range tcols {
            @colHeader(sheet.TableNames[i], col, sheet.PrefsMap[sheet.TableNames[i]+"."+col.Name])
        }
        }
        for i, col := range sheet.ExtraCols {
            @extraColHeader(i, col.Name)
        }
        </tr>
    </thead>
    <tbody>
    for j := 0; j < sheet.RowCount; j++ {
        <tr class="body-row" data-row={ strconv.Itoa(j) }>
        for i, tableCols := range cells {
        for k, cells := range tableCols {
            <td class={ templ.KV("is-null", !cells[j].NotNull) }>
                <span class="width-control">{ cells[j].Value }</span>
                @tableCell(sheet.TableNames[i], cols[i][k], j, cells[j], nil)
                if cols[i][k].IsPrimaryKey && cells[j].NotNull {
                    <input name={ "pk-" + sheet.TableNames[i] + " " + cols[i][k].Name }
                           data-table={ sheet.TableNames[i] }
                           value={ cells[j].Value }
                           type="hidden"/>
                }
            </td>
        }
        }
        for i, extraCol := range sheet.ExtraCols {
            @extraCell(i, j, extraCol.Cells[j])
        }
        </tr>
    }
    </tbody>
}
