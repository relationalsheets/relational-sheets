package main

import (
	"acb/db-interface/sheets"
    "fmt"
    "strconv"
)

templ colName(name string) {
    <span hx-post="/set-column-prefs"
        hx-vals={ fmt.Sprintf("js:{col_name:\"%s\",hide:shiftPressed}", name) }>
        { name }
    </span>
}

templ extraColName(i int, name string) {
    <input name="col_name"
           hx-vals={ fmt.Sprintf("{\"col_index\":%d}", i) }
           value={ name }
           hx-post="/rename-column"
           hx-swap="none" />
}

templ tableCell(tableName string, col sheets.Column, row int, cell sheets.Cell, err error) {
    <input name="value"
           hx-post="/set-cell"
           hx-target="this"
           hx-swap="outerHTML"
           hx-vals={ fmt.Sprintf("{\"table_name\":\"%s\",\"col_name\":\"%s\",\"row\":%d}", tableName, col.Name, row) }
           hx-include={ fmt.Sprintf("[name=sheet_id],tr[data-row=\"%d\"] [data-table=\"%s\"][name^=pk-]", row, tableName) }
           value={ cell.Value }
           disabled?={ col.IsPrimaryKey }
           size={ strconv.Itoa(len(cell.Value)) }
           class={ templ.KV("is-danger", err != nil) } />
}

templ extraCell(i, j int, cell sheets.SheetCell) {
    <td class={ "extra-cell", templ.KV("is-null", !cell.NotNull) }>
        <input name="formula"
               class="extra-cell-formula hide"
               value={ cell.Formula }
               hx-post="/set-cell"
               hx-vals={ fmt.Sprintf("{\"i\":%d,\"j\":%d}", i, j) }
               hx-target="closest td"
               hx-swap="outerHTML"/>
        <span class="extra-cell-value">
            { cell.Value }
        </span>
    </td>
}

templ sheetTable(sheet sheets.Sheet, tableNames []string, cols [][]sheets.Column, cells [][][]sheets.Cell, numCols int) {
    <thead>
        <tr>
            for i, tableName := range tableNames {
                <th colspan={ strconv.Itoa(len(cols[i])) }>
                    { tableName }
                </th>
            }
        </tr>
        <tr id="header-row">
        for _, tcols := range cols {
        for _, col := range tcols {
            <th class={ templ.KV("is-pkey", col.IsPrimaryKey) }>
                @colName(col.Name)
            </th>
        }
        }
        for i, col := range sheet.ExtraCols {
            <th>
                @extraColName(i, col.Name)
            </th>
        }
        </tr>
    </thead>
    <tbody>
        <tr id="new-row" class="hide">
        for i, tcols := range cols {
        for _, col := range tcols {
            <td style="border-bottom: none">
                <input name={ "column-" + tableNames[i] + " " + col.Name }/>
            </td>
        }
        }
        </tr>
        <tr id="new-row-err-container" class="hide">
            <td colspan={ fmt.Sprintf("%d", numCols) }
                style="border-top: none">
                <div class="flex center">
                    <button hx-post="/add-row"
                            hx-include="#new-row"
                            hx-target-400="#new-row-err"
                            class="button is-light maround">
                        Add
                    </button>
                    <span id="new-row-err" class="has-text-danger">
                    </span>
                </div>
            </td>
        </tr>
    for j := 0; j < sheet.RowCount; j++ {
        <tr class="body-row" data-row={ strconv.Itoa(j) }>
        for i, tableCols := range cells {
        for k, cells := range tableCols {
            <td class={ templ.KV("is-null", !cells[j].NotNull) }>
                @tableCell(tableNames[i], cols[i][k], j, cells[j], nil)
                if cols[i][k].IsPrimaryKey && cells[j].NotNull {
                    <input name={ "pk-" + cols[i][k].Name }
                           data-table={ tableNames[i] }
                           value={ cells[j].Value }
                           type="hidden"/>
                }
            </td>
        }
        }
        for i, extraCol := range sheet.ExtraCols {
            @extraCell(i, j, extraCol.Cells[j])
        }
        </tr>
    }
    </tbody>
}
