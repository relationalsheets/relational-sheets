// Code generated by templ@v0.2.334 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

// This file is part of Relational Sheets.
//
// Relational Sheets is free software: you can redistribute it and/or modify it under the
// terms of the GNU Affero General Public License as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.
//
// Relational Sheets is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with Relational Sheets.
// If not, see https://www.gnu.org/licenses/agpl-3.0.html

import (
	"acb/db-interface/fkeys"
	"acb/db-interface/sheets"
	"fmt"
	"slices"
	"strconv"
)

func fkeySelect(index int, sheet sheets.Sheet, options map[string]map[int64]fkeys.ForeignKey, selected int64) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"select fkey-select\"><select name=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("fkey-" + strconv.Itoa(index)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-post=\"/modal\"><option value=\"\">")
		if err != nil {
			return err
		}
		var_2 := `None`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option>")
		if err != nil {
			return err
		}
		for _, tableName := range sheet.TableNames {
			for oid, fkey := range options[tableName] {
				if oid == selected || !slices.Contains(sheet.JoinOids, oid) {
					_, err = templBuffer.WriteString("<option value=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(strconv.FormatInt(oid, 10)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"")
					if err != nil {
						return err
					}
					if oid == selected {
						_, err = templBuffer.WriteString(" selected")
						if err != nil {
							return err
						}
					}
					_, err = templBuffer.WriteString(">")
					if err != nil {
						return err
					}
					var var_3 string = fkey.ToString()
					_, err = templBuffer.WriteString(templ.EscapeString(var_3))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</option>")
					if err != nil {
						return err
					}
				}
			}
		}
		_, err = templBuffer.WriteString("</select></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func modal(sheet sheets.Sheet, tableNames []string, options map[string]map[int64]fkeys.ForeignKey, addJoin bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"modal\" class=\"modal is-active\" hx-target=\"#modal\" onclick=\"event.stopPropagation()\"><div class=\"modal-content box\"><div id=\"table-fkey-config\" hx-include=\"select\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("{\"sheet_id\": %d}", sheet.Id)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><label>")
		if err != nil {
			return err
		}
		var_5 := `Tables`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><div class=\"dropdown-list\"><div class=\"select table-select\"><select name=\"table_name\" hx-post=\"/modal\"><option value=\"\"></option>")
		if err != nil {
			return err
		}
		for _, tableName := range tableNames {
			_, err = templBuffer.WriteString("<option value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(tableName))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
			if tableName == sheet.TableFullName() {
				_, err = templBuffer.WriteString(" selected")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			var var_6 string = tableName
			_, err = templBuffer.WriteString(templ.EscapeString(var_6))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</select></div>")
		if err != nil {
			return err
		}
		for index, oid := range sheet.JoinOids {
			err = fkeySelect(index, sheet, options, oid).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		if addJoin {
			err = fkeySelect(len(sheet.JoinOids), sheet, options, 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<button hx-post=\"/modal\" name=\"add_join\" class=\"button is-primary\">")
		if err != nil {
			return err
		}
		var_7 := `+ Join`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></div><div class=\"flex full-width mt center\"><a href=\"")
		if err != nil {
			return err
		}
		var var_8 templ.SafeURL = templ.SafeURL("?sheet_id=" + strconv.Itoa(sheet.Id))
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_8)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"button is-primary\">")
		if err != nil {
			return err
		}
		var_9 := `Ok`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div></div><button class=\"modal-close\"></button></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
