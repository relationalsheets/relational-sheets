// Code generated by templ@v0.2.334 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
)

func table(name string, cols []Column, colspan string, cells [][]Cell) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<thead><tr id=\"header-row\"><th><button onclick=\"htmx.removeClass(htmx.find(&#39;#new-row&#39;), &#39;hide&#39;)\n                                 htmx.removeClass(htmx.find(&#39;#new-row-err-container&#39;), &#39;hide&#39;)\">")
		if err != nil {
			return err
		}
		var_2 := `+`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></th>")
		if err != nil {
			return err
		}
		for _, col := range cols {
			var var_3 = []any{templ.KV("is-primary", col.IsPrimaryKey)}
			err = templ.RenderCSSItems(ctx, templBuffer, var_3...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<th class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_3).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" onmouseup=\"document.getElementById(&#39;column&#39;).value = this.textContent\" hx-post=\"/table\" hx-include=\"#header-row,[name=name]\">")
			if err != nil {
				return err
			}
			var var_4 string = col.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_4))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<input type=\"hidden\" id=\"column\" name=\"column\"><input type=\"hidden\" id=\"hide\" name=\"hide\" value=\"false\"></tr></thead><tbody><tr id=\"new-row\" class=\"hide\"><td style=\"border-bottom: none\"><button hx-post=\"/table\" hx-include=\"#new-row,[name=name]\" hx-target-400=\"#new-row-err\">")
		if err != nil {
			return err
		}
		var_5 := `Add`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></td>")
		if err != nil {
			return err
		}
		for _, col := range cols {
			_, err = templBuffer.WriteString("<td style=\"border-bottom: none\"><input name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("column-" + col.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"></td>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tr><tr id=\"new-row-err-container\" class=\"hide\"><td id=\"new-row-err\" colspan=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(colspan))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" style=\"border-top: none\" class=\"has-text-danger\"></td></tr>")
		if err != nil {
			return err
		}
		for _, row := range cells {
			_, err = templBuffer.WriteString("<tr><td></td>")
			if err != nil {
				return err
			}
			for _, cell := range row {
				var var_6 = []any{templ.KV("is-null", cell.Null)}
				err = templ.RenderCSSItems(ctx, templBuffer, var_6...)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<td class=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_6).String()))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_7 string = cell.Value
				_, err = templBuffer.WriteString(templ.EscapeString(var_7))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</tr>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<input type=\"hidden\" name=\"name\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></tbody>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func RenderTable(t Table, cells [][]Cell) templ.Component {
	cols := t.OrderedCols()
	colspan := fmt.Sprintf("%d", len(cols)+1)
	return table(t.FullName(), cols, colspan, cells)
}
