// Code generated by templ@v0.2.334 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"acb/db-interface/sheets"
	"fmt"
	"strconv"
)

func colName(name string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<span hx-post=\"/set-column-prefs\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("js:{col_name:\"%s\",hide:shiftPressed}", name)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var var_2 string = name
		_, err = templBuffer.WriteString(templ.EscapeString(var_2))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func extraColName(i int, name string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<input name=\"col_name\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("{\"col_index\":%d}", i)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-post=\"/rename-column\" hx-swap=\"none\">")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func tableCell(tableName string, col sheets.Column, row int, cell sheets.Cell, err error) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_5 = []any{templ.KV("is-danger", err != nil)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_5...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<input name=\"value\" hx-post=\"/set-cell\" hx-target=\"this\" hx-swap=\"outerHTML\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("{\"table_name\":\"%s\",\"col_name\":\"%s\",\"row\":%d}", tableName, col.Name, row)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-include=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("[name=sheet_id],tr[data-row=\"%d\"] [data-table=\"%s\"][name^=pk-]", row, tableName)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(cell.Value))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if col.IsPrimaryKey {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" size=\"1\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_5).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func extraCell(i, j int, cell sheets.SheetCell) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_6 := templ.GetChildren(ctx)
		if var_6 == nil {
			var_6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_7 = []any{"extra-cell", templ.KV("is-null", !cell.NotNull)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_7...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<td class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_7).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><input name=\"formula\" class=\"extra-cell-formula hide\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(cell.Formula))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-post=\"/set-cell\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("{\"i\":%d,\"j\":%d}", i, j)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"closest td\" hx-swap=\"outerHTML\"><span class=\"extra-cell-value\">")
		if err != nil {
			return err
		}
		var var_8 string = cell.Value
		_, err = templBuffer.WriteString(templ.EscapeString(var_8))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></td>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func sheetTable(sheet sheets.Sheet, tableNames []string, cols [][]sheets.Column, cells [][][]sheets.Cell, numCols int) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_9 := templ.GetChildren(ctx)
		if var_9 == nil {
			var_9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<thead><tr>")
		if err != nil {
			return err
		}
		for i, tableName := range tableNames {
			_, err = templBuffer.WriteString("<th colspan=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(strconv.Itoa(len(cols[i]))))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_10 string = tableName
			_, err = templBuffer.WriteString(templ.EscapeString(var_10))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tr><tr id=\"header-row\">")
		if err != nil {
			return err
		}
		for _, tcols := range cols {
			for _, col := range tcols {
				var var_11 = []any{templ.KV("is-pkey", col.IsPrimaryKey)}
				err = templ.RenderCSSItems(ctx, templBuffer, var_11...)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<th class=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_11).String()))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				err = colName(col.Name).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th>")
				if err != nil {
					return err
				}
			}
		}
		for i, col := range sheet.ExtraCols {
			_, err = templBuffer.WriteString("<th>")
			if err != nil {
				return err
			}
			err = extraColName(i, col.Name).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tr></thead><tbody><tr id=\"new-row\" class=\"hide\">")
		if err != nil {
			return err
		}
		for i, tcols := range cols {
			for _, col := range tcols {
				_, err = templBuffer.WriteString("<td style=\"border-bottom: none\"><input name=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString("column-" + tableNames[i] + " " + col.Name))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"></td>")
				if err != nil {
					return err
				}
			}
		}
		_, err = templBuffer.WriteString("</tr><tr id=\"new-row-err-container\" class=\"hide\"><td colspan=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", numCols)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" style=\"border-top: none\"><div class=\"flex center\"><button hx-post=\"/add-row\" hx-include=\"#new-row\" hx-target-400=\"#new-row-err\" class=\"button is-light maround\">")
		if err != nil {
			return err
		}
		var_12 := `Add`
		_, err = templBuffer.WriteString(var_12)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><span id=\"new-row-err\" class=\"has-text-danger\"></span></div></td></tr>")
		if err != nil {
			return err
		}
		for j := 0; j < sheet.RowCount; j++ {
			_, err = templBuffer.WriteString("<tr class=\"body-row\" data-row=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(strconv.Itoa(j)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			for i, tableCols := range cells {
				for k, cells := range tableCols {
					var var_13 = []any{templ.KV("is-null", !cells[j].NotNull)}
					err = templ.RenderCSSItems(ctx, templBuffer, var_13...)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("<td class=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_13).String()))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"><span class=\"width-control\">")
					if err != nil {
						return err
					}
					var var_14 string = cells[j].Value
					_, err = templBuffer.WriteString(templ.EscapeString(var_14))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</span>")
					if err != nil {
						return err
					}
					err = tableCell(tableNames[i], cols[i][k], j, cells[j], nil).Render(ctx, templBuffer)
					if err != nil {
						return err
					}
					if cols[i][k].IsPrimaryKey && cells[j].NotNull {
						_, err = templBuffer.WriteString("<input name=\"")
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString(templ.EscapeString("pk-" + cols[i][k].Name))
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("\" data-table=\"")
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString(templ.EscapeString(tableNames[i]))
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("\" value=\"")
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString(templ.EscapeString(cells[j].Value))
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("\" type=\"hidden\">")
						if err != nil {
							return err
						}
					}
					_, err = templBuffer.WriteString("</td>")
					if err != nil {
						return err
					}
				}
			}
			for i, extraCol := range sheet.ExtraCols {
				err = extraCell(i, j, extraCol.Cells[j]).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</tr>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tbody>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
