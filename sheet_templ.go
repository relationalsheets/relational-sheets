// Code generated by templ@v0.2.334 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"acb/db-interface/sheets"
	"fmt"
)

func colName(name string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<span hx-post=\"/set-column-prefs\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("js:{col_name:\"%s\",hide:shiftPressed}", name)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var var_2 string = name
		_, err = templBuffer.WriteString(templ.EscapeString(var_2))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func extraColName(i int, name string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<input name=\"col_name\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("{\"col_index\":%d}", i)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-post=\"/rename-column\" hx-swap=\"none\">")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func extraCell(i, j int, cell sheets.SheetCell) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_5 = []any{"extra-cell", templ.KV("is-null", !cell.NotNull)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_5...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<td class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_5).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><input name=\"formula\" class=\"extra-cell-formula hide\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(cell.Formula))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-post=\"/set-cell\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("{\"i\":%d,\"j\":%d}", i, j)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"closest td\" hx-swap=\"outerHTML\"><span class=\"extra-cell-value\">")
		if err != nil {
			return err
		}
		var var_6 string = cell.Value
		_, err = templBuffer.WriteString(templ.EscapeString(var_6))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></td>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func sheetTable(name string, cols []sheets.Column, ExtraCols []sheets.SheetColumn, rowCount int) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_7 := templ.GetChildren(ctx)
		if var_7 == nil {
			var_7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<thead><tr id=\"header-row\"><th><button onclick=\"htmx.removeClass(htmx.find(&#39;#new-row&#39;), &#39;hide&#39;)\n                                 htmx.removeClass(htmx.find(&#39;#new-row-err-container&#39;), &#39;hide&#39;)\">")
		if err != nil {
			return err
		}
		var_8 := `+ Row`
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></th>")
		if err != nil {
			return err
		}
		for i, col := range cols {
			var var_9 = []any{templ.KV("is-pkey", col.IsPrimaryKey)}
			err = templ.RenderCSSItems(ctx, templBuffer, var_9...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<th class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_9).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			if len(ExtraCols) > 0 || i+1 < len(cols) {
				err = colName(col.Name).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString("<div class=\"flex\">")
				if err != nil {
					return err
				}
				err = colName(col.Name).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</th>")
			if err != nil {
				return err
			}
		}
		for i, col := range ExtraCols {
			if i+1 < len(ExtraCols) {
				_, err = templBuffer.WriteString("<th>")
				if err != nil {
					return err
				}
				err = extraColName(i, col.Name).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th>")
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString("<th><div class=\"flex\">")
				if err != nil {
					return err
				}
				err = extraColName(i, col.Name).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div></th>")
				if err != nil {
					return err
				}
			}
		}
		_, err = templBuffer.WriteString("</tr></thead><tbody><tr id=\"new-row\" class=\"hide\"><td style=\"border-bottom: none\"><button hx-post=\"/add-row\" hx-include=\"#new-row\" hx-target-400=\"#new-row-err\">")
		if err != nil {
			return err
		}
		var_10 := `Add`
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></td>")
		if err != nil {
			return err
		}
		for _, col := range cols {
			_, err = templBuffer.WriteString("<td style=\"border-bottom: none\"><input name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("column-" + col.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"></td>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tr><tr id=\"new-row-err-container\" class=\"hide\"><td id=\"new-row-err\" colspan=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", len(cols))))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" style=\"border-top: none\" class=\"has-text-danger\"></td></tr>")
		if err != nil {
			return err
		}
		for j := 0; j < rowCount; j++ {
			_, err = templBuffer.WriteString("<tr class=\"body-row\"><td></td>")
			if err != nil {
				return err
			}
			for _, col := range cols {
				var var_11 = []any{templ.KV("is-null", !col.Cells[j].NotNull)}
				err = templ.RenderCSSItems(ctx, templBuffer, var_11...)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<td class=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_11).String()))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"><span>")
				if err != nil {
					return err
				}
				var var_12 string = col.Cells[j].Value
				_, err = templBuffer.WriteString(templ.EscapeString(var_12))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span></td>")
				if err != nil {
					return err
				}
			}
			for i, extraCol := range ExtraCols {
				err = extraCell(i, j, extraCol.Cells[j]).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</tr>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tbody>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func renderSheet(s sheets.Sheet) templ.Component {
	return sheetTable(s.TableFullName(), s.OrderedCols(), s.ExtraCols, s.RowCount())
}
