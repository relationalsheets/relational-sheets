// Code generated by templ@v0.2.334 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
)

func colName(name string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<span hx-post=\"/set-column-prefs\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("js:{col_name:\"%s\",hide:shiftPressed}", name)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var var_2 string = name
		_, err = templBuffer.WriteString(templ.EscapeString(var_2))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func extraColName(i int, name string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<input name=\"col_name\" hx-vals=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("{\"col_index\":%d}", i)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-post=\"/rename-column\" hx-swap=\"none\">")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func addColButton() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<button id=\"add-col-button\" hx-post=\"/add-column\">")
		if err != nil {
			return err
		}
		var_5 := `+ Col`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func sheet(name string, cols []Column, extraCols []SheetColumn, cells [][]Cell) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_6 := templ.GetChildren(ctx)
		if var_6 == nil {
			var_6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<thead><tr id=\"header-row\"><th><button onclick=\"htmx.removeClass(htmx.find(&#39;#new-row&#39;), &#39;hide&#39;)\n                                 htmx.removeClass(htmx.find(&#39;#new-row-err-container&#39;), &#39;hide&#39;)\">")
		if err != nil {
			return err
		}
		var_7 := `+ Row`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></th>")
		if err != nil {
			return err
		}
		for i, col := range cols {
			var var_8 = []any{templ.KV("is-pkey", col.IsPrimaryKey)}
			err = templ.RenderCSSItems(ctx, templBuffer, var_8...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<th class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_8).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			if len(extraCols) > 0 || i+1 < len(cols) {
				err = colName(col.Name).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString("<div class=\"flex\">")
				if err != nil {
					return err
				}
				err = colName(col.Name).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = addColButton().Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</th>")
			if err != nil {
				return err
			}
		}
		for i, col := range extraCols {
			if i+1 < len(extraCols) {
				_, err = templBuffer.WriteString("<th>")
				if err != nil {
					return err
				}
				err = extraColName(i, col.Name).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th>")
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString("<th><div class=\"flex\">")
				if err != nil {
					return err
				}
				err = extraColName(i, col.Name).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = addColButton().Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div></th>")
				if err != nil {
					return err
				}
			}
		}
		_, err = templBuffer.WriteString("</tr></thead><tbody><tr id=\"new-row\" class=\"hide\"><td style=\"border-bottom: none\"><button hx-post=\"/add-row\" hx-include=\"#new-row\" hx-target-400=\"#new-row-err\">")
		if err != nil {
			return err
		}
		var_9 := `Add`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></td>")
		if err != nil {
			return err
		}
		for _, col := range cols {
			_, err = templBuffer.WriteString("<td style=\"border-bottom: none\"><input name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("column-" + col.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"></td>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tr><tr id=\"new-row-err-container\" class=\"hide\"><td id=\"new-row-err\" colspan=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", len(cols))))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" style=\"border-top: none\" class=\"has-text-danger\"></td></tr>")
		if err != nil {
			return err
		}
		for j, row := range cells {
			_, err = templBuffer.WriteString("<tr class=\"body-row\"><td></td>")
			if err != nil {
				return err
			}
			for _, cell := range row {
				var var_10 = []any{templ.KV("is-null", !cell.NotNull)}
				err = templ.RenderCSSItems(ctx, templBuffer, var_10...)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<td class=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_10).String()))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"><span>")
				if err != nil {
					return err
				}
				var var_11 string = cell.Value
				_, err = templBuffer.WriteString(templ.EscapeString(var_11))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span></td>")
				if err != nil {
					return err
				}
			}
			for i, extraCol := range extraCols {
				var var_12 = []any{templ.KV("is-null", !extraCol.cells[j].NotNull)}
				err = templ.RenderCSSItems(ctx, templBuffer, var_12...)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<td class=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_12).String()))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"><input name=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("custom-cell-%d,%d", i, j)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" class=\"custom-cell-formula hide\" value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(extraCol.cells[j].formula))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" hx-post=\"/set-cell\" hx-target=\"next span\"><span class=\"custom-cell-value\">")
				if err != nil {
					return err
				}
				var var_13 string = extraCol.cells[j].Value
				_, err = templBuffer.WriteString(templ.EscapeString(var_13))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span></td>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</tr>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tbody>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func RenderSheet(s Sheet, cells [][]Cell) templ.Component {
	return sheet(s.table.FullName(), s.OrderedCols(), s.extraCols, cells)
}
